<templateSet group="user">
  <template name="configuration-processor" value="// autogenerates configuration suggestions&#10;    compileOnly('org.springframework.boot:spring-boot-configuration-processor')&#10;    annotationProcessor('org.springframework.boot:spring-boot-configuration-processor')" description="Dependency configuration that autogenerate spring-metadata.json" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="GROOVY_EXPRESSION" value="true" />
      <option name="GROOVY_STATEMENT" value="true" />
    </context>
  </template>
  <template name="__gradle_junit" value="buildscript {&#10;  repositories {&#10;    mavenCentral()&#10;    maven {&#10;      url &quot;https://plugins.gradle.org/m2/&quot;&#10;    }&#10;  }&#10;  dependencies {&#10;    classpath(&quot;org.junit.platform:junit-platform-gradle-plugin:${junitPlatformPluginVersion}&quot;)&#10;    classpath(&quot;gradle.plugin.org.assertj:assertj-generator-gradle-plugin:${assertjGeneratorVersion}&quot;)&#10;  }&#10;}&#10;&#10;apply plugin: 'org.junit.platform.gradle.plugin'&#10;apply plugin: &quot;org.assertj.generator&quot;&#10;&#10;sourceSets {&#10;  main {&#10;    assertJ {&#10;      // TODO: comment this out to generate assertj assert, copy interesting ones to test source &amp; uncomment this to avoid duplicates&#10;      skip = true&#10;    }&#10;  }&#10;}&#10;&#10;dependencies {&#10;  // junit5&#10;  testCompile('org.junit.jupiter:junit-jupiter-api')&#10;  testCompile('org.junit.jupiter:junit-jupiter-engine')&#10;  testCompile('org.junit.jupiter:junit-jupiter-params')&#10;  testCompile('org.junit.vintage:junit-vintage-engine')&#10;}&#10;&#10;configurations {&#10;  // auto generated tests from spring cloud contract forces us not to exclude &lt; junit 5 classes aswell&#10;  // all*.exclude group: 'junit', module: 'junit'&#10;}&#10;&#10;// TODO: Add following configuration to test/resources/junit-platform.properties &#10;// # JUnit5 Spring Configuration&#10;// # We want the application context to be reused between tests within the top level test class&#10;// junit.jupiter.testinstance.lifecycle.default=per_class&#10;// junit.jupier.extensions.autodetection.enabled=true" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="GROOVY_EXPRESSION" value="true" />
      <option name="GROOVY_STATEMENT" value="true" />
    </context>
  </template>
  <template name="__gradle_log4j2" value="dependencies {&#10;  // log4j2&#10;  compile('org.springframework.boot:spring-boot-starter-log4j2')&#10;  compile('org.apache.logging.log4j:log4j-jcl')&#10;  compile('org.apache.logging.log4j:log4j-jul')&#10;  compile(&quot;com.lmax:disruptor:${lmaxDisruptorVersion}&quot;) // supports async loggers&#10;}&#10;&#10;configurations {&#10;  // log4j2 is much better than slf4j. Lets remove that form dependencies&#10;  all*.exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'&#10;}&#10;" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="GROOVY_EXPRESSION" value="true" />
      <option name="GROOVY_STATEMENT" value="true" />
    </context>
  </template>
  <template name="__gradle_lombok+" value="dependencies {&#10;  // lombok&#10;  compileOnly('org.projectlombok:lombok')&#10;  annotationProcessor(&quot;org.projectlombok:lombok&quot;)&#10;  compileOnly(&quot;org.jetbrains:annotations:${jetbrainsAnnotationsVersion}&quot;)&#10;}&#10;&#10;// TODO: Create a file named src/lombok.config with the following content&#10;// lombok.anyConstructor.suppressConstructorProperties=false&#10;// config.stopBubbling=true&#10;// TODO: Also add these properties to intellij annotation processor&#10;" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="GROOVY_EXPRESSION" value="true" />
      <option name="GROOVY_STATEMENT" value="true" />
    </context>
  </template>
  <template name="__docker_compose_mysql" value="version: '3'&#10;&#10;services:&#10;  mysql:&#10;    image: mysql&#10;    environment:&#10;      MYSQL_ROOT_PASSWORD: password&#10;      MYSQL_DATABASE: todo&#10;      MYSQL_USER: user&#10;      MYSQL_PASSWORD: password&#10;    ports:&#10;      - 3306:3306" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="AsciiDoc" value="false" />
      <option name="Bash" value="false" />
      <option name="CPT" value="false" />
      <option name="GROOVY" value="false" />
      <option name="HTML" value="false" />
      <option name="JAVA_CODE" value="false" />
      <option name="JSON" value="false" />
      <option name="KOTLIN" value="false" />
      <option name="MARKDOWN" value="false" />
      <option name="MAVEN" value="false" />
      <option name="OTHER" value="true" />
      <option name="PL/SQL" value="false" />
      <option name="SCALA" value="false" />
      <option name="SPOCK_SPECIFICATION" value="false" />
      <option name="SQL" value="false" />
      <option name="SSP" value="false" />
      <option name="XML" value="false" />
      <option name="sbt" value="false" />
    </context>
  </template>
  <template name="__gradle_flyway_test" value="testCompile(&quot;org.flywaydb.flyway-test-extensions:flyway-spring5-test:${flywayTestExtensionVersion}&quot;)" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="GROOVY_EXPRESSION" value="true" />
      <option name="GROOVY_STATEMENT" value="true" />
    </context>
  </template>
  <template name="__junit_jdbc" value="java.sql.Connection connection = java.sql.DriverManager.getConnection(&quot;jdbc:h2:mem:testdb&quot;, &quot;sa&quot;, &quot;&quot;);&#10;    java.sql.Statement statement = connection.createStatement();&#10;    statement.execute(&quot;create table user (id int, name varchar(255))&quot;);&#10;    statement.execute(&quot;insert into user (id, name) values (1, 'Demo User')&quot;);&#10;    java.sql.ResultSet resultSet = statement.executeQuery(&quot;select * from user&quot;);&#10;    resultSet.next();&#10;    assertThat(resultSet.getInt(&quot;id&quot;)).isEqualTo(1);&#10;    assertThat(resultSet.getString(&quot;name&quot;)).isEqualTo(&quot;Demo User&quot;);" description="" toReformat="true" toShortenFQNames="true" useStaticImport="true">
    <context>
      <option name="JAVA_EXPRESSION" value="true" />
      <option name="JAVA_STATEMENT" value="true" />
    </context>
  </template>
</templateSet>